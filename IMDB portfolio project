--view our dataset--
SELECT *
FROM CopyofIMDBTop250MoviesCleanedIMDBTop250Movies

--change table name--
ALTER TABLE CopyofIMDBTop250MoviesCleanedIMDBTop250Movies RENAME TO Movies

SELECT *
FROM Movies

--top 5 budgeted movies--
SELECT name, budget
FROM Movies
ORDER BY budget DESC
LIMIT 5

--princess mononoke update--
UPDATE Movies
SET budget = REPLACE(budget,2400000000,23500000)

--3 idiots--
UPDATE Movies
SET budget = REPLACE(budget,550000000,6700000)

--updated top 5 budgeted movies--
SELECT name, budget
FROM Movies
ORDER BY budget DESC
LIMIT 5


--top 5 rated movies--
SELECT name, rating
FROM Movies
ORDER BY rating DESC
LIMIT 5

--top 5 box office hits--
SELECT name, box_office
FROM Movies
ORDER BY box_office DESC
LIMIT 5

--top 10 highest profit--
SELECT name, box_office, budget, (box_office - budget) AS profit
FROM Movies
ORDER BY profit DESC
LIMIT 10

--top 10 lowest profit movies--
SELECT name, box_office, budget, (box_office - budget) AS profit
FROM Movies
ORDER BY profit 
LIMIT 10

--the most popular genres--
SELECT genre, COUNT(*) AS genre_count
FROM (
  SELECT TRIM(value) AS genre
  FROM Movies
  CROSS JOIN json_each('["'|| REPLACE(genre,',','","') || '"]')
  )
  GROUP BY genre
  ORDER BY genre_count DESC
  LIMIT 5
  
  --top 10 directors--
 SELECT directors, COUNT(*) AS Number_of_movies
 FROM Movies
 GROup BY directors
 ORDER BY Number_of_movies DESC
 LIMIT 10
 
 --how many movies in each rating category--CopyofIMDBTop250MoviesCleanedIMDBTop250Movies
 SELECT certificate, COUNT(*) AS Total
 FROM Movies
 GROup BY certificate
 ORDER BY Total DESC
 
 --best years for movies--
 --how many movies in each decade--
 --most popular movie genre in each decade-- try first, then corrected
 
 
 ---best year for movies---
 SELECT year, COUNT(year) AS Number_of_Movies_Per_Year
 FROM Movies
 GROUP BY year
 ORDER BY COUNT(year) DESC
 Limit 10
 
 --how many movies in each year-minealone-
 SELECT year, COUNT (*) AS year_count
 FROM Movies
 GROUP BY year
 ORDER BY year_count DESC
 
 --how many movies in each decade-mine-
SELECT
    year/10 * 10 + 1 as dec_start,
    year/10 * 10 + 10 as dec_end,
    COUNT(name) as num_movies
FROM  Movies
GROUP BY year/10 
ORDER BY dec_start

---how many movies in each deacade---
SELECT 
    year/10 * 10 + 1 as decade_start,
    year/10 * 10 + 10 as decade_end,
    COUNT(year) as number_of_movies
FROM  Movies
GROUP BY year/10 
ORDER BY decade_start
  
 --most popular movie genre in each decade-mine- 
SELECT
    year/10 * 10 + 1 as dec_start,
    year/10 * 10 + 10 as dec_end,
    COUNT(name) AS num_movies,
    max(genre)
FROM  Movies
GROUP BY (year/10)
ORDER BY dec_start

---most popular movies in each genre---
WITH genre_counts AS (
  SELECT genre, COUNT(*) AS genre_count, year
  FROM (
    SELECT TRIM(value) AS genre, year
    FROM Movies
    CROSS JOIN json_each('["' || REPLACE(genre, ',', '","') || '"]')
  )
  GROUP BY genre, year
), decade_max_genre AS (
  SELECT d.decade_start, d.decade_end, gc.genre,
         ROW_NUMBER() OVER (PARTITION BY d.decade_start ORDER BY gc.genre_count DESC) AS rn
  FROM (
    SELECT 
      year/10 * 10 + 1 AS decade_start,
      year/10 * 10 + 10 AS decade_end
    FROM Movies
    GROUP BY year/10
  ) d
  JOIN genre_counts gc ON gc.year >= d.decade_start AND gc.year <= d.decade_end
)
SELECT decade_start, decade_end, genre
FROM decade_max_genre
WHERE rn = 1
ORDER BY decade_start

---most updated version for Tableau--
** as with the previous query for visualization purposes lets combine the decade_start and decade_end into 1 column 

WITH genre_counts AS (
  SELECT genre, COUNT(*) AS genre_count, year
  FROM (
    SELECT TRIM(value) AS genre, year
    FROM Movies
    CROSS JOIN json_each('["' || REPLACE(genre, ',', '","') || '"]')
  )
  GROUP BY genre, year
), decade_max_genre AS (
  SELECT 
    d.decade_start || ' - ' || d.decade_end AS decade,
    gc.genre,
    ROW_NUMBER() OVER (PARTITION BY d.decade_start ORDER BY gc.genre_count DESC) AS rn
  FROM (
    SELECT 
      (year/10) * 10 + 1 AS decade_start,
      (year/10) * 10 + 10 AS decade_end
    FROM Movies
    GROUP BY year/10
  ) d
  JOIN genre_counts gc ON gc.year >= d.decade_start AND gc.year <= d.decade_end
)
SELECT decade, genre
FROM decade_max_genre
WHERE rn = 1
ORDER BY decade

 
